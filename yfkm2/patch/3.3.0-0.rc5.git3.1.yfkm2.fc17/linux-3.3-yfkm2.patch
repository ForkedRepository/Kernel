diff -uNrp a/arch/x86/syscalls/syscall_32.tbl b/arch/x86/syscalls/syscall_32.tbl
--- a/arch/x86/syscalls/syscall_32.tbl	2012-03-03 22:45:57.172710473 -0300
+++ b/arch/x86/syscalls/syscall_32.tbl	2012-03-03 23:02:46.723612727 -0300
@@ -355,3 +355,5 @@
 346	i386	setns			sys_setns
 347	i386	process_vm_readv	sys_process_vm_readv		compat_sys_process_vm_readv
 348	i386	process_vm_writev	sys_process_vm_writev		compat_sys_process_vm_writev
+349	i386	yfkm2_monitor		sys_yfkm2_monitor
+350	i386	yfkm2_notifyme		sys_yfkm2_notifyme
diff -uNrp a/arch/x86/syscalls/syscall_64.tbl b/arch/x86/syscalls/syscall_64.tbl
--- a/arch/x86/syscalls/syscall_64.tbl	2012-03-03 22:45:57.170710473 -0300
+++ b/arch/x86/syscalls/syscall_64.tbl	2012-03-03 23:01:24.258620456 -0300
@@ -318,3 +318,5 @@
 309	64	getcpu			sys_getcpu
 310	64	process_vm_readv	sys_process_vm_readv
 311	64	process_vm_writev	sys_process_vm_writev
+312	64	yfkm2_monitor		sys_yfkm2_monitor
+313	64	yfkm2_notifyme		sys_yfkm2_notifyme
diff -uNrp a/Makefile b/Makefile
--- a/Makefile	2012-03-03 22:45:48.785710291 -0300
+++ b/Makefile	2012-03-03 22:58:36.088602483 -0300
@@ -708,7 +708,7 @@ export mod_strip_cmd
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ samples/yfkm2/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff -uNrp a/samples/yfkm2/Makefile b/samples/yfkm2/Makefile
--- a/samples/yfkm2/Makefile	1969-12-31 21:00:00.000000000 -0300
+++ b/samples/yfkm2/Makefile	2012-03-03 22:57:25.198606089 -0300
@@ -0,0 +1 @@
+obj-y := yfkm2.o
diff -uNrp a/samples/yfkm2/userspace/Makefile b/samples/yfkm2/userspace/Makefile
--- a/samples/yfkm2/userspace/Makefile	1969-12-31 21:00:00.000000000 -0300
+++ b/samples/yfkm2/userspace/Makefile	2012-03-04 09:30:36.276690097 -0300
@@ -0,0 +1,7 @@
+all:
+	gcc monitor.c -o monitor
+	gcc notifyme.c -o notifyme
+
+clean:
+	rm monitor
+	rm notifyme
diff -uNrp a/samples/yfkm2/userspace/monitor.c b/samples/yfkm2/userspace/monitor.c
--- a/samples/yfkm2/userspace/monitor.c	1969-12-31 21:00:00.000000000 -0300
+++ b/samples/yfkm2/userspace/monitor.c	2012-03-03 22:57:25.212606088 -0300
@@ -0,0 +1,28 @@
+#include <stdio.h>
+#include <unistd.h>
+#include <sys/syscall.h>
+
+#define SYS_yfkm2_monitor	__NR_yfkm2_monitor
+#define SYS_yfkm2_notifyme	__NR_yfkm2_notifyme
+
+int main (int argc, char *argv[])
+{
+
+	if (argc < 2) {
+		printf("Error. Use %s <PID>\n", argv[0]);
+		return 1;
+	}
+        pid_t pid = atoi(argv[1]);
+        long ret;
+
+
+        ret = syscall(SYS_yfkm2_monitor, pid);
+
+	if (ret == 0){
+		printf("Sucess on adding %d!\n", pid);
+		return 0;
+	} else {
+		printf("Failure! Is %s a valid PID?\n", argv[1]);
+		return 1;
+	}
+}
Binary files a/samples/yfkm2/userspace/.monitor.c.swp and b/samples/yfkm2/userspace/.monitor.c.swp differ
diff -uNrp a/samples/yfkm2/userspace/notifyme.c b/samples/yfkm2/userspace/notifyme.c
--- a/samples/yfkm2/userspace/notifyme.c	1969-12-31 21:00:00.000000000 -0300
+++ b/samples/yfkm2/userspace/notifyme.c	2012-03-03 22:57:25.210606088 -0300
@@ -0,0 +1,33 @@
+#include <stdio.h>
+#include <unistd.h>
+#include <sys/syscall.h>
+
+#define SYS_yfkm2_monitor	__NR_yfkm2_monitor
+#define SYS_yfkm2_notifyme	__NR_yfkm2_notifyme
+
+int main (int argc, char *argv[])
+{
+
+	if (argc < 2) {
+		printf("Error. Use %s <PID>\n", argv[0]);
+		return 1;
+	}
+
+        pid_t monitor, notifyme;
+        long ret;
+
+	monitor = atoi(argv[1]);
+	notifyme = getpid();
+
+        ret = syscall(SYS_yfkm2_notifyme, monitor, notifyme);
+
+	if (ret == 0){
+		printf("Sucess on adding %d!\n", monitor);
+		printf("Finish %d to see what happens to me.\n", monitor);
+		while (1)
+			sleep (10);
+	} else {
+		printf("Failure! Is %s a valid PID?\n", argv[1]);
+		return 1;
+	}
+}
diff -uNrp a/samples/yfkm2/yfkm2.c b/samples/yfkm2/yfkm2.c
--- a/samples/yfkm2/yfkm2.c	1969-12-31 21:00:00.000000000 -0300
+++ b/samples/yfkm2/yfkm2.c	2012-03-23 20:03:18.577439365 -0300
@@ -0,0 +1,215 @@
+/*
+ * yfkm2 - Your first Kernel Modification v2
+ * Peter Senna Tschudin <peter.senna@gmail.com>
+ *
+ */
+
+/*
+ * KNOWN BUGS:
+ * Does not work when trying to notify more than one process for same monitored
+ * PID.
+ *
+ */
+
+/*
+ * TODO:
+ *
+ * Split .c in .c + .h
+ *
+ * Check if Kernel thread started correctly and treat possible errors
+ *
+ * Check if yfkm2_list->notify != 0 before seting new value
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/list.h>
+#include <linux/sched.h>
+#include <linux/slab.h>
+#include <linux/kthread.h>
+
+#define YFKM2_KT_TIMEOUT (1*HZ) /* 1 second */
+
+struct yfkm2 {
+	pid_t monitor;		/* PID to monitor */
+	pid_t notifyme;		/* PID to notify */
+	struct list_head list;	/* Linked List struct */
+};
+
+/* How many Kernel Threads are running? */
+atomic_t yfkm2_kthread_run_count = ATOMIC_INIT(0);
+
+/* Define and initialize yfkm2_(linked)list */
+LIST_HEAD(yfkm2_list);
+
+/* Define and initialize yfkm2_(read&write)lock */
+DEFINE_RWLOCK(yfkm2_lock);
+
+/*
+ * yfkm2_is_pid_running(pid_t pid)
+ *
+ * Check if pid is running
+ *
+ * return 0 if pid is running
+ * return 1 if pid is not running
+ */
+int yfkm2_is_pid_running(pid_t pid)
+{
+	struct task_struct *q;
+
+	rcu_read_lock();
+	q = find_task_by_vpid(pid);
+	rcu_read_unlock();
+
+	if (q != NULL && q->pid == pid)
+		return 0;
+	else
+		return 1;
+}
+
+/*
+ * yfkm2_kill(pid_t pid)
+ *
+ * Kills pid
+ *
+ * return 0 if pid was running and send SIGKILL to pid
+ * return 1 if pid is not running
+ */
+int yfkm2_kill(pid_t pid)
+{
+	struct task_struct *q;
+	int ret;
+
+	rcu_read_lock();
+	q = find_task_by_vpid(pid);
+	rcu_read_unlock();
+
+	if (q != NULL) {
+		force_sig(SIGKILL, q);
+		return 0;
+	}
+
+	return 1;
+}
+
+/*
+ * int yfkm2_kthread(void *data)
+ *
+ * The Kernel Thread
+ *
+ * Traverse the yfkm2_list looking for yfkm2->notifyme that are not 0.
+ * If any found, check if correspondent yfkm2->monitor is still running. If not
+ * kill yfkm2->notifyme. After traversing the list, check if the list is empty.
+ * If so return 0. If not sleep one second and start again.
+ *
+ * return 0 if yfkm2_list is empty
+ * should never return 1
+ */
+int yfkm2_kthread(void *data) /* data is NEVER used */
+{
+	struct yfkm2 *yfkm2_tmp, *yfkm2_tmp2;
+	bool empty;
+
+	while (true) {
+		/* Needs write protection due possible item removal from list */
+		write_lock(&yfkm2_lock); /* Write lock */
+		list_for_each_entry_safe(yfkm2_tmp, yfkm2_tmp2,
+						&yfkm2_list, list) {
+			if (yfkm2_tmp->notifyme != 0) {
+				if (yfkm2_is_pid_running(yfkm2_tmp->monitor) != 0) {
+					yfkm2_kill(yfkm2_tmp->notifyme);
+					list_del(&yfkm2_tmp->list);
+					kfree(yfkm2_tmp);
+				}
+			}
+		}
+		write_unlock(&yfkm2_lock); /* Write unlock */
+
+		read_lock(&yfkm2_lock); /* Read lock */
+		empty = list_empty(&yfkm2_list);
+		read_unlock(&yfkm2_lock); /* Read unlock */
+
+		if (empty) {
+			/* The counter is increased at sys_yfkm2_notifyme()
+			 * Before exit, decrease atomic run counter */
+			atomic_dec(&yfkm2_kthread_run_count);
+			return 0;
+		}
+
+		set_current_state(TASK_INTERRUPTIBLE);
+		schedule_timeout(YFKM2_KT_TIMEOUT);
+	}
+	/* Before exit, decrease atomic run counter */
+	atomic_dec(&yfkm2_kthread_run_count);
+	return 1;
+}
+
+/*
+ * asmlinkage long sys_yfkm2_monitor(pid_t monitor)
+ *
+ * The system call that check if monitor correspond to a running pid and stores
+ * monitor at yfkm2_list->monitor
+ *
+ * return 0 if pid is running
+ * return 1 if pid is not running
+ */
+asmlinkage long sys_yfkm2_monitor(pid_t monitor)
+{
+	struct yfkm2 *yfkm2_tmp;
+
+	if (yfkm2_is_pid_running(monitor) == 0) {
+
+		yfkm2_tmp = kmalloc(sizeof(*yfkm2_tmp), GFP_KERNEL);
+		yfkm2_tmp->monitor = monitor;
+		yfkm2_tmp->notifyme = 0;
+
+		write_lock(&yfkm2_lock);
+		list_add(&yfkm2_tmp->list, &yfkm2_list);
+		write_unlock(&yfkm2_lock);
+
+		return 0;
+	}
+
+
+	return 1;
+}
+
+/*
+ * asmlinkage long sys_yfkm2_notifyme(pid_t monitor, pid_t notifyme)
+ *
+ * The system call that looks for monitor at yfkm2_list->monitor. If found
+ * store notifyme at yfkm2_list->notifyme. It also starts the kernel thread
+ * if it is not running.
+ *
+ * return 0 if pid is running
+ * return 1 if pid is not running
+ */
+asmlinkage long sys_yfkm2_notifyme(pid_t monitor, pid_t notifyme)
+{
+	struct yfkm2 *yfkm2_tmp;
+	bool found_monitored_pid = false;
+
+	write_lock(&yfkm2_lock); /* Write lock */
+	list_for_each_entry(yfkm2_tmp, &yfkm2_list, list) {
+		if (yfkm2_tmp->monitor == monitor) {
+			yfkm2_tmp->notifyme = notifyme;
+
+			found_monitored_pid = true;
+
+			break;
+		}
+	}
+	write_unlock(&yfkm2_lock); /* Write unlock */
+
+	if (found_monitored_pid) {
+		if (atomic_read(&yfkm2_kthread_run_count) < 1) {
+			/* The counter is decreased at yfkm2_kthread()
+			 * Before start, increase atomic run counter */
+			atomic_inc(&yfkm2_kthread_run_count);
+			kthread_run(&yfkm2_kthread, NULL, "yfkm2_kthread");
+		}
+
+		return 0;
+	} else
+		return 1;
+}
